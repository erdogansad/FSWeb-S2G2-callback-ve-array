const { fifaData } = require('./fifa.js')


/* GÃ¶rev 1: 
	Verilen datayÄ± parÃ§alayarak aÅŸaÄŸÄ±daki verileri (console.log-ing) elde ederek pratik yapÄ±n. 
	
	ðŸ’¡ Ä°PUCU: Ã–ncelikle datayÄ± filtrelemek isteyebilirsiniz */
	let finalGame = fifaData.filter(game => { return game['Year'] === 2014 && game['Stage'] === "Final"})[0],
		getData = (game, type, team) => {
			const obj = {
				name: { home: game['Home Team Name'], away: game['Away Team Name'] },
				goal: { home: game['Home Team Goals'], away: game['Away Team Goals'] },
				winner: function() {
					if(this.goal.home === this.goal.away){
						let condition = game['Win conditions'],
							splitted = condition.split(" ");
						return [splitted[0], condition];
					}else{
						return (this.goal.home > this.goal.away) ? this.name.home : this.name.away;
					}
				}
			}
			return type === "winner" ? obj.winner() : obj[type][team];
		};
	

//(a) 2014 DÃ¼nya kupasÄ± Finali Evsahibi takÄ±m ismi (dizide "Home Team Name" anahtarÄ±)
	console.log(getData(finalGame, "name", "home"));

//(b) 2014 DÃ¼nya kupasÄ± Finali Deplasman takÄ±m ismi  (dizide "Away Team Name" anahtarÄ±)
	console.log(getData(finalGame, "name", "away"));

//(c) 2014 DÃ¼nya kupasÄ± finali Ev sahibi takÄ±m golleri (dizide "Home Team Goals" anahtarÄ±)
	console.log(getData(finalGame, "goal", "home"));

//(d)2014 DÃ¼nya kupasÄ± finali Deplasman takÄ±m golleri  (dizide "Away Team Goals" anahtarÄ±)
	console.log(getData(finalGame, "goal", "away"));

//(e) 2014 DÃ¼nya kupasÄ± finali kazananÄ±*/
	console.log(getData(finalGame, "winner"));
	

/*  GÃ¶rev 2: 
	Finaller adlÄ± fonksiyonu kullanarak aÅŸaÄŸÄ±dakileri uygulayÄ±n:
	1. Bir dizi(array) olan Fifa datasÄ±nÄ± fonksiyonun birinci parametresi olarak alacak
	2. Sadece final maÃ§larÄ±nÄ± iÃ§eren nesnenin(object) datalarÄ±nÄ± filtreleyerek, bir dizi olarak dÃ¶ndÃ¼recek(return)
	
	ðŸ’¡ Ä°PUCU - verilen data iÃ§indeki nesnelerin(objects) "Stage" anahtarÄ±na bakmalÄ±sÄ±nÄ±z
*/

function Finaller(arr) {
	let finalData = arr.filter(game => {return game['Stage'] === "Final"});
	return finalData;
}



/*  GÃ¶rev 3: 
	Bir higher-order fonksiyonu olan Yillar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n: 
	1. fifaData dizisini(array) fonksiyonun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. Finaller data setindeki tÃ¼m yÄ±llarÄ± iÃ§eren "years" adÄ±ndaki diziyi(array) dÃ¶ndÃ¼recek
	*/

function Yillar(arr, callback) {
	let data = callback(arr), years = [];
	data.filter(game => { return years.push(game['Year']) });
	return years;
}


/*  GÃ¶rev 4: 
	Bir higher-order fonksiyonunu olan Kazananlar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n:  
	1. fifaData dizisini(array) fonksiyonunun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. Her final maÃ§Ä±nÄ±n kazananÄ±nÄ± (evsahibi ya da deplasman) belirleyecek
	ðŸ’¡ Ä°PUCU: Beraberlikler(ties) iÃ§in ÅŸimdilik endiÅŸelenmeyin (DetaylÄ± bilgi iÃ§in README dosyasÄ±na bakabilirsiniz.)
	4. TÃ¼m kazanan Ã¼lkelerin isimlerini iÃ§eren `kazananlar` adÄ±nda bir dizi(array) dÃ¶ndÃ¼recek(return)  */ 

function Kazananlar(arr, callback) {
	let data = callback(arr), 
		winners = data.map((game) => {
			return getData(game, "winner");
		});
	return winners;
}



/*  GÃ¶rev 5: 
	Bir higher-order fonksiyonu olan YillaraGoreKazananlar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n:
	1. fifaData dizisini(array) fonksiyonunun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. GÃ¶rev 3'de yazdÄ±ÄŸÄ±nÄ±z Yillar fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun Ã¼Ã§Ã¼ncÃ¼ parametresi olarak alacak
	4. GÃ¶rev 4'de yazdÄ±ÄŸÄ±nÄ±z Kazananlar fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun dÃ¶rdÃ¼ncÃ¼ parametresi olarak alacak
	5. Her yÄ±l iÃ§in "{yÄ±l} yÄ±lÄ±nda, {Ã¼lke} dÃ¼nya kupasÄ±nÄ± kazandÄ±!" cÃ¼mlesini(string) iÃ§eren bir diziyi(array) dÃ¶ndÃ¼recek
	
	ðŸ’¡ Ä°PUCU: her cÃ¼mlenin adÄ±m 4'te belirtilen cÃ¼mleyle birebir aynÄ± olmasÄ± gerekmektedir.
*/

function YillaraGoreKazananlar(arr, finalsCb, yearsCb, winnersCb) {
	let winnersText = [],
		finals = finalsCb(arr),
		years = yearsCb(finals, finalsCb),
		winners = winnersCb(finals, finalsCb);

	years.map((year, idx) => {
		let winner = winners[idx],
			winnerText = Array.isArray(winner) ? `${year} yÄ±lÄ±nda, ${winner[0]} dÃ¼nya kupasÄ±nÄ± kazandÄ±! (${winner[1]})` : `${year} yÄ±lÄ±nda, ${winner} dÃ¼nya kupasÄ±nÄ± kazandÄ±!`;
		winnersText.push(winnerText);
	});
	return winnersText;
}


/*  GÃ¶rev 6: 
	Bir higher order fonksiyonu olan `OrtalamaGolSayisi` isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n: 
	1. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z `Finaller` fonksiyonunu birinci parametre olarak alacak; 'fifaData' dizisini argÃ¼man olarak eklediÄŸinizden emin olun
	
	ðŸ’¡ Ä°PUCU: Ã‡aÄŸÄ±rma Ã¶rneÄŸi: `OrtalamaGolSayisi(Finaller(fifaData));`
	
	2. Her maÃ§ iÃ§in Ortalama toplam evsahibi gol sayÄ±sÄ± ve toplam deplasman gol sayÄ±sÄ±nÄ± hesaplayacak (her maÃ§ta atÄ±lan toplam gol sayÄ±sÄ±)
	
	3. Sonucun 2. ondalÄ±ÄŸÄ±nÄ± yuvarlayÄ±p, bulunan deÄŸeri dÃ¶ndÃ¼recek(return)
	
	ðŸ’¡ Ä°PUCU: .reduce, .toFixed (dizilim(syntax) iÃ§in MDN'ye bakÄ±n) kullan, ve bunu 2 adÄ±mda yapÄ±n) 
	
*/

function OrtalamaGolSayisi(finals) {
	let total = finals.reduce((ttl, game) => { return ttl + game['Home Team Goals'] + game['Away Team Goals'] }, 0),
		avr = total / finals.length;
	return avr.toFixed(2);
}



/// EKSTRA Ã‡ALIÅžMALAR ///

/*  BONUS 1:  
	`UlkelerinKazanmaSayilari` isminde bir fonksiyon oluÅŸturun, parametre olarak `data` ve `takÄ±m kÄ±saltmalarÄ±nÄ±` alacak ve hangi Ã¼lkenin kaÃ§ dÃ¼nya kupasÄ± olduÄŸunu dÃ¶ndÃ¼recek
	
	Ä°pucu: "takÄ±m kÄ±saltmalarÄ±" (team initials) iÃ§in datada araÅŸtÄ±rma yapÄ±n!
Ä°pucu: `.reduce` KullanÄ±n*/

function UlkelerinKazanmaSayilari(arr, team, finalsCb) {
	let teamName,
		finals = finalsCb(arr),
		winCount = finals.reduce((ttl, game) => {
			let home = game['Home Team Initials'], 
				away = game['Away Team Initials'], 
				hGoal = game['Home Team Goals'], 
				aGoal = game['Away Team Goals'];

			if(hGoal === aGoal){
				let condition = game['Win conditions'].split(" "),
					teamPrefix = team.charAt(0).toUpperCase() + team.slice(1).toLowerCase();

				if(condition[0].startsWith(teamPrefix)){
					if(teamName === undefined) teamName = condition[0];
					ttl++;
				}
			}else{
				if(home === team && hGoal > aGoal){
					if(teamName === undefined) teamName = game['Home Team Name'];
					ttl++;
				}else if(away === team && aGoal > hGoal){
					if(teamName === undefined) teamName = game['Away Team Name'];
					ttl++;
				} 
			}

			return ttl;
		}, 0);

	return `${teamName} DÃ¼nya KupasÄ±'nÄ± toplamda ${winCount} kez kazandÄ±!`;
}

console.log(UlkelerinKazanmaSayilari(fifaData, "BRA", Finaller));


/*  BONUS 2:  
EnCokGolAtan() isminde bir fonksiyon yazÄ±n, `data` yÄ± parametre olarak alsÄ±n ve DÃ¼nya kupasÄ± finallerinde en Ã§ok gol atan takÄ±mÄ± dÃ¶ndÃ¼rsÃ¼n */

function EnCokGolAtan(arr, finalsCb) {
	let finals = finalsCb(arr),
		teams = [], 
		filter = finals.filter(game => {
			let home = game['Home Team Name'], 
				away = game['Away Team Name'], 
				hGoal = game['Home Team Goals'], 
				aGoal = game['Away Team Goals'],
				increaseGoal = function(teamName, teamGoal) {
					let data = teams.filter(team => { if(team.name === teamName) return team })

					data[0] !== undefined ? data[0].goal+= teamGoal : teams.push({name: teamName, goal: teamGoal});
				};

			increaseGoal(home, hGoal);
			increaseGoal(away, aGoal);
		}),
		mostGoalsCount = teams.sort((a,b) => b.goal - a.goal);

	return `DÃ¼nya kupasÄ± finallerindeki en golcÃ¼ takÄ±m: ${mostGoalsCount[0].goal} golle ${mostGoalsCount[0].name}!`;
}

console.log(EnCokGolAtan(fifaData, Finaller));


/*  BONUS 3: 
EnKotuDefans() adÄ±nda bir fonksiyon yazÄ±n, `data` yÄ± parametre olarak alsÄ±n ve DÃ¼nya kupasÄ±nda finallerinde en Ã§ok golÃ¼ yiyen takÄ±mÄ± dÃ¶ndÃ¼rsÃ¼n*/

function EnKotuDefans(arr, finalsCb) {
	let finals = finalsCb(arr),
		teams = [],
		filter = finals.filter(game => {
			let home = game['Home Team Name'], 
				away = game['Away Team Name'], 
				hGoal = game['Home Team Goals'], 
				aGoal = game['Away Team Goals'],
				increaseGoal = function(teamName, teamGoal) {
					let data = teams.filter(team => { if(team.name === teamName) return team })

					data[0] !== undefined ? data[0].goal+= teamGoal : teams.push({name: teamName, goal: teamGoal});
				};

				increaseGoal(home, aGoal);
				increaseGoal(away, hGoal);
		}),
		mostGoalsCount = teams.sort((a,b) => b.goal - a.goal);

	return `DÃ¼nya kupasÄ± finallerindeki en kÃ¶tÃ¼ defansa sahip takÄ±m: ${mostGoalsCount[0].goal} golle ${mostGoalsCount[0].name}!`;
}

console.log(EnKotuDefans(fifaData, Finaller));


/* Hala vaktiniz varsa, README dosyasÄ±nda listelenen hedeflerden istediÄŸinizi aÅŸaÄŸÄ±daki boÅŸluÄŸa yazabilirsiniz. */

function DunyaKupasinaKatilmaSayisi(arr, team) {
	let years = [],
		teamName,
		filter = arr.filter(game => {
			let year = game['Year'],
				home = game['Home Team Initials'],
				away = game['Home Team Initials'],
				counter = function(yearVal){
					let data = years.filter(yearV => { if(yearV.year === yearVal) return yearV});

					if(data[0] === undefined) years.push({year: yearVal});
				};

				if(home === team || away === team){
					counter(year);
					if(teamName === undefined) home === team ? teamName = game['Home Team Name'] : teamName = game['Away Team Name'];
				};
		})

	return `${teamName}, DÃ¼nya KupasÄ±'na ${years.length} kez katÄ±ldÄ±!`;
}

console.log(DunyaKupasinaKatilmaSayisi(fifaData, "TUR"));

function GolSayma(arr, yearVal, team){
	let teamName,
		goalCount = arr.reduce((ttl, game) => {
		let year = game['Year'],
			home = game['Home Team Initials'],
			away = game['Away Team Initials'],
			hGoal = game['Home Team Goals'], 
			aGoal = game['Away Team Goals'];
		if(year > yearVal){
			if(home === team) {
				if(teamName === undefined) teamName = game['Home Team Name'];
				ttl+= hGoal;
			}
			else if(away === team) {
				if(teamName === undefined) teamName = game['Away Team Name'];
				ttl+= aGoal;
			}
		}
		return ttl;
	}, 0);

	return `${teamName}, DÃ¼nya kupasÄ±nda ${yearVal} yÄ±lÄ±ndan sonra toplamda ${goalCount} gol attÄ±!`;
}

console.log(GolSayma(fifaData, 1930, "TUR"));


/* Bu satÄ±rÄ±n aÅŸaÄŸÄ±sÄ±ndaki kodlarÄ± lÃ¼tfen deÄŸiÅŸtirmeyin */
function sa(){
    console.log('Kodlar Ã§alÄ±ÅŸÄ±yor');
    return 'as';
}
sa();
module.exports = {
    sa,
    Finaller,
    Yillar,
    Kazananlar,
    YillaraGoreKazananlar,
    OrtalamaGolSayisi
}
